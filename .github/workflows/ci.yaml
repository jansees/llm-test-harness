name: CI

# Triggers workflow on push and pull requests
on: [push, pull_request]

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  e2e-on-kind:
    runs-on: ubuntu-latest

    steps:
      # Step 1. Checkout repo
      - uses: actions/checkout@v4

      # Step 2. Create kind (Kubernetes in Docker) cluster
      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          version: v0.22.0
          kubectl_version: v1.29.0

      # Step 2.1 Create namespace explicitly so it does not throw error during HF secret creation
      - name: Create llm namespace
        run: kubectl create namespace llm || true

      # Step 2.2. Create storage class and Persistent Claim
      - name: Create storage class and PV
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: local-pv
          spec:
            capacity:
              storage: 4Gi
            accessModes:
              - ReadWriteOnce
            hostPath:
              path: "/tmp/data"
            storageClassName: standard
          EOF

      #Step 2.3 Create HF secret
      - name: Create Hugging Face secret
        run: |
          kubectl -n llm create secret generic hf --from-literal=token=${{ secrets.HF_TOKEN }}


      # Step 3. Deploy llama.cpp server
      - name: Deploy llama.cpp server
        run: |
          kubectl apply -f k8s/llamacpp.yaml
          kubectl -n llm rollout status deploy/llm --timeout=1800s         
        # kubectl -n llm get pods -o wide

      # Step 3a. Debugging
      - name: Get pod details
        if: always()
        run: kubectl get pods -n llm -o wide

      - name: Describe all pods
        if: always()
        run: kubectl describe pods -n llm

      - name: Logs from initContainer
        if: always()
        run: |
          POD=$(kubectl get pods -n llm -o jsonpath="{.items[0].metadata.name}" 2>/dev/null || echo "")
          if [ -n "$POD" ]; then
            kubectl logs $POD -n llm -c fetch-model || true
          fi

      - name: Logs from main container
        if: always()
        run: |
          POD=$(kubectl get pods -n llm -o jsonpath="{.items[0].metadata.name}" 2>/dev/null || echo "")
          if [ -n "$POD" ]; then
            kubectl logs $POD -n llm -c server || true
          fi

      - name: Get PVCs
        run: kubectl get pvc -n llm

      - name: Describe PVC
        run: kubectl describe pvc models-pvc -n llm

      # Add more logging
      - name: Debug
        run: |
          echo "Current directory: $(pwd)"
          echo "List files:"
          ls -al

      # Step 4. Port forward service
      - name: Port forward service
        run: |
          kubectl -n llm port-forward svc/llm 8080:8080 &
          sleep 5

      # Step 5. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Step 6. Install dependencies
      - name: Install Python dependencies
        run: pip install -r requirements.txt

      # Step 7. Run pytest harness
      - name: Run tests
        run: pytest harness --base-url http://127.0.0.1:8080

      # Step 8. Upload test reports
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports